"use strict";(self.webpackChunkmuinaismuistot=self.webpackChunkmuinaismuistot||[]).push([[568],{2132:(e,t,n)=>{function r(e,t){let n=e.length-t,r=0;do{for(let n=t;n>0;n--)e[r+t]+=e[r],r++;n-=t}while(n>0)}function a(e,t,n){let r=0,a=e.length;const i=a/n;for(;a>t;){for(let n=t;n>0;--n)e[r+t]+=e[r],++r;a-=t}const o=e.slice();for(let t=0;t<i;++t)for(let r=0;r<n;++r)e[n*t+r]=o[(n-r-1)*i+t]}n.d(t,{A:()=>i});class i{async decode(e,t){const n=await this.decodeBlock(t),i=e.Predictor||1;if(1!==i){const t=!e.StripOffsets;return function(e,t,n,i,o,s){if(!t||1===t)return e;for(let e=0;e<o.length;++e){if(o[e]%8!=0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(o[e]!==o[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const c=o[0]/8,d=2===s?1:o.length;for(let s=0;s<i&&!(s*d*n*c>=e.byteLength);++s){let i;if(2===t){switch(o[0]){case 8:i=new Uint8Array(e,s*d*n*c,d*n*c);break;case 16:i=new Uint16Array(e,s*d*n*c,d*n*c/2);break;case 32:i=new Uint32Array(e,s*d*n*c,d*n*c/4);break;default:throw new Error(`Predictor 2 not allowed with ${o[0]} bits per sample.`)}r(i,d)}else 3===t&&(i=new Uint8Array(e,s*d*n*c,d*n*c),a(i,d,c))}return e}(n,i,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return n}}},6568:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n(2132);class a extends r.A{constructor(){if(super(),"undefined"==typeof createImageBitmap)throw new Error("Cannot decode WebImage as `createImageBitmap` is not available");if("undefined"==typeof document&&"undefined"==typeof OffscreenCanvas)throw new Error("Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available")}async decode(e,t){const n=new Blob([t]),r=await createImageBitmap(n);let a;"undefined"!=typeof document?(a=document.createElement("canvas"),a.width=r.width,a.height=r.height):a=new OffscreenCanvas(r.width,r.height);const i=a.getContext("2d");return i.drawImage(r,0,0),i.getImageData(0,0,r.width,r.height).data.buffer}}}}]);